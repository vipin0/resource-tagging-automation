# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

AWSTemplateFormatVersion: "2010-09-09"
Description: AWS auto tagging solution for EC2, ELB, EFS, EBS, S3, RDS, DynamoDB, Lambda, OpenSearch, ElastiCache, Redshift, SageMaker, SNS, SQS, KMS, MQ, MSK and ECS.

Parameters:
  AutomationTags:
    Type: String
    Default: ""
    Description: 'Sample: {"TagName1": "TagValue1","TagName2": "TagValue2"}'

  LambdaAutoTaggingFunctionName:
    Type: String
    Description: Name of the lambda-Ayto-Tagging-Function-Name
    Default: resource-tagging-automation-function

  EventBridgeRuleName:
    Type: String
    Description: Name of the EventBridge Rules
    Default: resource-tagging-automation-rules

  IAMAutoTaggingRoleName:
    Type: String
    Description: IAM role name for lambda
    Default: resource-tagging-automation-role

  IAMAutoTaggingPolicyName:
    Type: String
    Description: IAM customed managed policy
    Default: resource-tagging-automation-policy

  TrailName:
    Type: String
    Description: Name of the Cloudtrail to record events
    Default: resource-tagging-automation-trail

Resources:
  # S3 Bucket for Cloudtrail
  TrailBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName:
        !Join [
          "-",
          ["tagging-log", !Select [2, !Split ["/", !Ref "AWS::StackId"]]],
        ]

  # S3 Bucket policy
  TrailBucketPolicy:
    DependsOn: TrailBucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TrailBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource: !Sub "arn:aws:s3:::${TrailBucket}"
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::${TrailBucket}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": "bucket-owner-full-control"

  # Cloudtrail resource
  Trail:
    DependsOn: TrailBucketPolicy
    Type: AWS::CloudTrail::Trail
    Properties:
      S3BucketName: !Ref TrailBucket
      IsLogging: true
      TrailName: !Ref TrailName
      EnableLogFileValidation: false
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true

  # Lambda function resource
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Ref IAMAutoTaggingPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  # Rules for DynamoDB
                  - "dynamodb:TagResource"
                  - "dynamodb:DescribeTable"

                  # Rules for Lambdas
                  - "lambda:TagResource"
                  - "lambda:ListTags"

                  # Rules for S3
                  - "s3:GetBucketTagging"
                  - "s3:PutBucketTagging"

                  # Rules for EC2
                  - "ec2:CreateTags"
                  - "ec2:DescribeNatGateways"
                  - "ec2:DescribeInternetGateways"
                  - "ec2:DescribeVolumes"

                  # Rules for RDS
                  - "rds:AddTagsToResource"
                  - "rds:DescribeDBInstances"

                  # Rules for SNS
                  - "sns:TagResource"

                  # Rules for SQS
                  - "sqs:ListQueueTags"
                  - "sqs:TagQueue"

                  # Rules for OpenSearch
                  - "es:AddTags"

                  # Rules for KMS
                  - "kms:ListResourceTags"
                  - "kms:TagResource"

                  # Rules for EFS
                  - "elasticfilesystem:TagResource"
                  - "elasticfilesystem:CreateTags"
                  - "elasticfilesystem:DescribeTags"

                  # Rules for ELB
                  - "elasticloadbalancing:AddTags"

                  # Rules for CloudWatch
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"

                  # Rules for Redshift
                  - "redshift:CreateTags"
                  - "redshift-serverless:TagResource"

                  # Rules for Sagemaker
                  - "sagemaker:AddTags"

                  # Rules for ECS
                  - "ecs:TagResource"

                  # Rules for MSK
                  - "kafka:TagResource"

                  # Rules for CloudWatch logs and alarms
                  - "logs:TagLogGroup"
                  - "cloudwatch:TagResource"

                  # Rules for Amazon MQ
                  - "mq:CreateTags"

                  # Rules for Resource Group Tag Editor
                  - "tag:getResources"
                  - "tag:getTagKeys"
                  - "tag:getTagValues"
                  - "tag:TagResources"
                  - "tag:UntagResources"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:ListStackResources"
                  - "resource-groups:*"
                Resource: "*"

  LambdaAutoTagging:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          # SPDX-License-Identifier: MIT-0

          import boto3
          import os
          import json

          def aws_ec2(event):
              arnList = []
              _account = event['account']
              _region = event['region']
              ec2ArnTemplate = 'arn:aws:ec2:@region@:@account@:instance/@instanceId@'
              volumeArnTemplate = 'arn:aws:ec2:@region@:@account@:volume/@volumeId@'
              ec2_resource = boto3.resource('ec2')
              if event['detail']['eventName'] == 'RunInstances':
                  print("tagging for new EC2...")
                  for item in event['detail']['responseElements']['instancesSet']['items']:
                      _instanceId = item['instanceId']
                      arnList.append(ec2ArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@instanceId@', _instanceId))

                      _instance = ec2_resource.Instance(_instanceId)
                      for volume in _instance.volumes.all():
                          arnList.append(volumeArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@volumeId@', volume.id))

              elif event['detail']['eventName'] == 'CreateVolume':
                  print("tagging for new EBS...")
                  _volumeId = event['detail']['responseElements']['volumeId']
                  arnList.append(volumeArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@volumeId@', _volumeId))
                  
              elif event['detail']['eventName'] == 'CreateInternetGateway':
                  print("tagging for new IGW...")
                  
              elif event['detail']['eventName'] == 'CreateNatGateway':
                  print("tagging for new Nat Gateway...")
                  
              elif event['detail']['eventName'] == 'AllocateAddress':
                  print("tagging for new EIP...")
                  arnList.append(event['detail']['responseElements']['allocationId'])
                  
              elif event['detail']['eventName'] == 'CreateVpcEndpoint':
                  print("tagging for new VPC Endpoint...")
                  
              elif event['detail']['eventName'] == 'CreateTransitGateway':
                  print("tagging for new Transit Gateway...")

              return arnList
              
          def aws_elasticloadbalancing(event):
              arnList = []
              if event['detail']['eventName'] == 'CreateLoadBalancer':
                  print("tagging for new LoadBalancer...")
                  lbs = event['detail']['responseElements']
                  for lb in lbs['loadBalancers']:
                      arnList.append(lb['loadBalancerArn'])
                  return arnList

          def aws_rds(event):
              arnList = []
              if event['detail']['eventName'] == 'CreateDBInstance':
                  print("tagging for new RDS...")
                  #db_instance_id = event['detail']['requestParameters']['dBInstanceIdentifier']
                  #waiter = boto3.client('rds').get_waiter('db_instance_available')
                  #waiter.wait(
                  #    DBInstanceIdentifier = db_instance_id
                  #)
                  arnList.append(event['detail']['responseElements']['dBInstanceArn'])
                  return arnList

          def aws_s3(event):
              arnList = []
              if event['detail']['eventName'] == 'CreateBucket':
                  print("tagging for new S3...")
                  _bkcuetName = event['detail']['requestParameters']['bucketName']
                  arnList.append('arn:aws:s3:::' + _bkcuetName)
                  return arnList
                  
          def aws_lambda(event):
              arnList = []
              _exist1 = event['detail']['responseElements']
              _exist2 = event['detail']['eventName'] == 'CreateFunction20150331'
              if  _exist1!= None and _exist2:
                  function_name = event['detail']['responseElements']['functionName']
                  print('Functin name is :', function_name)
                  arnList.append(event['detail']['responseElements']['functionArn'])
                  return arnList

          def aws_dynamodb(event):
              arnList = []
              if event['detail']['eventName'] == 'CreateTable':
                  table_name = event['detail']['responseElements']['tableDescription']['tableName']
                  waiter = boto3.client('dynamodb').get_waiter('table_exists')
                  waiter.wait(
                      TableName=table_name,
                      WaiterConfig={
                          'Delay': 123,
                          'MaxAttempts': 123
                      }
                  )
                  arnList.append(event['detail']['responseElements']['tableDescription']['tableArn'])
                  return arnList
                  
          def aws_kms(event):
              arnList = []
              if event['detail']['eventName'] == 'CreateKey':
                  arnList.append(event['detail']['responseElements']['keyMetadata']['arn'])
                  return arnList

          def aws_sns(event):
              arnList = []
              _account = event['account']
              _region = event['region']
              snsArnTemplate = 'arn:aws:sns:@region@:@account@:@topicName@'
              if event['detail']['eventName'] == 'CreateTopic':
                  print("tagging for new SNS...")
                  _topicName = event['detail']['requestParameters']['name']
                  arnList.append(snsArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@topicName@', _topicName))
                  return arnList
                  
          def aws_sqs(event):
              arnList = []
              _account = event['account']
              _region = event['region']
              sqsArnTemplate = 'arn:aws:sqs:@region@:@account@:@queueName@'
              if event['detail']['eventName'] == 'CreateQueue':
                  print("tagging for new SQS...")
                  _queueName = event['detail']['requestParameters']['queueName']
                  arnList.append(sqsArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@queueName@', _queueName))
                  return arnList
                  
          def aws_elasticfilesystem(event):
              arnList = []
              _account = event['account']
              _region = event['region']
              efsArnTemplate = 'arn:aws:elasticfilesystem:@region@:@account@:file-system/@fileSystemId@'
              if event['detail']['eventName'] == 'CreateMountTarget':
                  print("tagging for new efs...")
                  _efsId = event['detail']['responseElements']['fileSystemId']
                  arnList.append(efsArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@fileSystemId@', _efsId))
                  return arnList
                  
          def aws_es(event):
              arnList = []
              if event['detail']['eventName'] == 'CreateDomain':
                  print("tagging for new open search...")
                  arnList.append(event['detail']['responseElements']['domainStatus']['aRN'])
                  return arnList

          def aws_elasticache(event):
              arnList = []
              _account = event['account']
              _region = event['region']
              ecArnTemplate = 'arn:aws:elasticache:@region@:@account@:cluster:@ecId@'

              if event['detail']['eventName'] == 'CreateReplicationGroup' or event['detail']['eventName'] == 'ModifyReplicationGroupShardConfiguration':
                  print("tagging for new ElastiCache cluster...")
                  _replicationGroupId = event['detail']['requestParameters']['replicationGroupId']
                  waiter = boto3.client('elasticache').get_waiter('replication_group_available')
                  waiter.wait(
                      ReplicationGroupId = _replicationGroupId,
                      WaiterConfig={
                          'Delay': 123,
                          'MaxAttempts': 123
                      }
                  )
                  _clusters = event['detail']['responseElements']['memberClusters']
                  for _ec in _clusters:
                      arnList.append(ecArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@ecId@', _ec))

              elif event['detail']['eventName'] == 'CreateCacheCluster':
                  print("tagging for new ElastiCache node...")
                  _cacheClusterId = event['detail']['responseElements']['cacheClusterId']
                  waiter = boto3.client('elasticache').get_waiter('cache_cluster_available')
                  waiter.wait(
                      CacheClusterId = _cacheClusterId,
                      WaiterConfig={
                          'Delay': 123,
                          'MaxAttempts': 123
                      }
                  )
                  arnList.append(event['detail']['responseElements']['aRN'])

              return arnList
              
          def get_identity(event):
              print("getting user Identity...")
              _userId = event['detail']['userIdentity']['arn'].split('/')[-1]
              
              if event['detail']['userIdentity']['type'] == 'AssumedRole':
                  _roleId = event['detail']['userIdentity']['arn'].split('/')[-2]
                  return _userId, _roleId
              return _userId

          def main(event, context):
              print(f"input event is: {event}")
              print("new source is ", event['source'])
              _method = event['source'].replace('.', "_")

              resARNs = globals()[_method](event)
              print("resource arn is: ", resARNs)

              _res_tags =  json.loads(os.environ['tags'])
              _identity_recording = os.environ['identityRecording']

              if _identity_recording == 'true':
                  if event['detail']['userIdentity']['type'] == 'AssumedRole':
                      _userId, _roleId = get_identity(event)
                      _res_tags['roleId'] = _roleId
                  else:
                      _userId = get_identity(event)
                  
                  _res_tags['userId'] = _userId
              
              print(_res_tags)
              boto3.client('resourcegroupstaggingapi').tag_resources(
                  ResourceARNList=resARNs,
                  Tags=_res_tags
              )

              return {
                  'statusCode': 200,
                  'body': json.dumps('Finished tagging with ' + event['source'])
              }

      FunctionName: !Ref LambdaAutoTaggingFunctionName
      Handler: index.main
      Runtime: python3.10
      Timeout: 300
      Environment:
        Variables:
          tags: !Ref AutomationTags

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rules to filtering events
      Name: !Ref EventBridgeRuleName
      EventPattern: '{
        "detail": {
        "eventSource": ["ec2.amazonaws.com", "elasticloadbalancing.amazonaws.com", "s3.amazonaws.com", "rds.amazonaws.com", "lambda.amazonaws.com", "dynamodb.amazonaws.com", "elasticfilesystem.amazonaws.com", "es.amazonaws.com", "sqs.amazonaws.com", "sns.amazonaws.com", "kms.amazonaws.com","redshift.amazonaws.com", "redshift-serverless.amazonaws.com", "sagemaker.amazonaws.com", "ecs.amazonaws.com", "monitoring.amazonaws.com", "logs.amazonaws.com", "kafka.amazonaws.com", "amazonmq.amazonaws.com"],
        "eventName": ["RunInstances", "CreateFunction20150331", "CreateBucket", "CreateDBInstance", "CreateTable", "CreateVolume", "CreateLoadBalancer", "CreateMountTarget", "CreateDomain", "CreateQueue", "CreateTopic", "CreateKey", "CreateCluster", "CreateNamespace", "CreateWorkgroup", "CreateNotebookInstance", "CreateProcessingJob", "CreateEndpoint", "CreateDomain", "CreateModel", "CreateLabelingJob", "CreateTrainingJob", "CreateTransformJob", "CreateUserProfile", "CreateWorkteam", "PutMetricAlarm", "CreateLogGroup", "CreateClusterV2", "CreateBroker"]
        },
        "detail-type": ["AWS API Call via CloudTrail"],
        "source": ["aws.ec2", "aws.elasticloadbalancing", "aws.rds", "aws.lambda", "aws.s3", "aws.dynamodb", "aws.elasticfilesystem", "aws.es", "aws.sqs", "aws.sns", "aws.kms", "aws.ecs", "aws.redshift", "aws.redshift-serverless", "aws.sagemaker", "aws.monitoring", "aws.logs", "aws.kafka", "aws.amazonmq"]
        }'
      Targets:
        - Arn: !GetAtt LambdaAutoTagging.Arn
          Id: !Ref LambdaAutoTaggingFunctionName

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "LambdaAutoTaggingFunctionName"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridgeRule.Arn
